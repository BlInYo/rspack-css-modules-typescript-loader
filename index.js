/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable no-debugger */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-undef */
const bannerMessage = `
/**
 * This file is automatically generated.
 * Please do not change this file!
 * 该文件根据*.module.less自动生成,修改无效
 */
`
const isFileNotFound = (err) => err && err.code === 'ENOENT'

const throwNotFoundFilError = ({ filename }) =>
  new Error(`Generated type declaration does not exist. Run rspack and commit the type declaration for '${filename}'`)

const cssModuleExport = 'export const cssExports: CssExports;\nexport default cssExports;\n'
const path = require('path')
const fs = require('fs')
const lineDiff = require('line-diff')

const enforceLFLineSeparators = (text) => {
  if (text) {
    return text.replace(/\r\n/g, '\n')
  } else {
    return text
  }
}

const compareText = (contentA, contentB) => {
  return enforceLFLineSeparators(contentA) === enforceLFLineSeparators(contentB)
}

const interfaceFilename = (filename, scope) => {
  return path.join(path.dirname(filename), `${path.basename(filename)}.d.ts`)
}

const makeFileHandlers = (filename) => {
  return {
    read: (handler) => fs.readFile(filename, { encoding: 'utf-8' }, handler),
    write: (content, handler) => fs.writeFile(filename, content, { encoding: 'utf-8' }, handler),
  }
}

const makeDoneHandler = (callback, content, rest) => {
  return {
    reject: (err) => callback(err),
    resolve: () => callback(null, content, ...rest),
  }
}
/**
 * @param {string[]} className
 * @returns string
 */
const cssModuleToInterface = (className) => {
  const interfaceFields = className
    .sort()
    .map((key) => ` '${key}':string;`)
    .join('\n')
  return `interface CssExports {\n${interfaceFields}\n}`
}

const getFilename = (path, scope = 'module') => {
  if (scope === 'module') {
    if (path.includes('module')) {
      return path
    }
  } else {
    return path
  }
}

const getTypeMismatchError = ({ filename, expected, actual }) => {
  const diff = new lineDiff(enforceLFLineSeparators(actual), expected).toString()
  return new Error(
    `Generated type declaration file is outdated. Run webpack and commit the updated type declaration for '${filename}'\n\n${diff}`
  )
}

module.exports = function (source, ...rest) {
  /**
   * @type {{
   * scope:'module'|'all', // 生成类型文件的范围, module: 只有*.module.less才生成, all: 全部的less文件都生成
   * mode:'emit'|'verify'
   * banner:string
   * }}
   */
  const options = this.getOptions()
  const { scope = 'module', mode = 'emit', banner = '' } = options
  /** @type {string} type - description */
  const filename =
    scope === 'module' ? (this.resourcePath.includes('module') ? this.resourcePath : '') : this.resourcePath
  const { resolve, reject } = makeDoneHandler(this.async(), source, rest)
  if (!filename) {
    return resolve()
  }
  const cssModuleInterfaceFilename = interfaceFilename(filename, scope)
  const { read, write } = makeFileHandlers(cssModuleInterfaceFilename)

  const regex = /(?<=\}\s*|^)(\.[a-zA-Z0-9_-]+)(?=\s*{)/g
  let match
  const classNames = []
  while ((match = regex.exec(source))) {
    if (classNames.indexOf(match[1]) < 0) {
      classNames.push(match[1].replace('.', ''))
    }
  }
  const interfaceFile = `${banner || bannerMessage}\n${cssModuleToInterface(classNames)}\n${cssModuleExport}`

  if (mode === 'verify') {
    read((err, fileContent) => {
      // 没有目录或文件
      if (err && err.code === 'ENOENT') {
        return reject(
          throwNotFoundFilError({
            filename: cssModuleInterfaceFilename,
          })
        )
      }
      if (err) {
        return reject(err)
      }
      if (!compareText(interfaceFile, fileContent)) {
        return reject(
          getTypeMismatchError({
            filename: cssModuleInterfaceFilename,
            expected: interfaceFile,
            actual: fileContent,
          })
        )
      }
      return resolve()
    })
  } else {
    read((_, fileContent) => {
      if (!compareText(interfaceFile, fileContent)) {
        write(interfaceFile, (err) => {
          if (err) {
            return reject(err)
          } else {
            return resolve()
          }
        })
      } else {
        return resolve()
      }
    })
  }
}
