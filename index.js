const bannerMessage = `
/**
 * This file is automatically generated.
 * Please do not change this file!
 * 该文件根据*.module.less自动生成,修改无效
 */
`
const cssModuleExport = 'export const cssExports: CssExports;\nexport default cssExports;\n'
const path = require('path')
const fs = require('fs')

const interfaceFilename = (filename) => path.join(path.dirname(filename), `${path.basename(filename)}.d.ts`)

const makeFileHandlers = (filename) => ({
  read: (handler) => fs.readFile(filename, { encoding: 'utf-8' }, handler),
  write: (content, handler) => fs.writeFile(filename, content, { encoding: 'utf-8' }, handler),
})

/**
 * @param {string[]} className
 * @returns string
 */
const cssModuleToInterface = (className) => {
  const interfaceFields = className
    .sort()
    .map((key) => ` '${key}':string;`)
    .join('\n')
  return `interface CssExports {\n${interfaceFields}\n}`
}

module.exports = function (source) {
  /** @type {string} type - description */
  const filename = this.resourcePath

  const cssModuleInterfaceFilename = interfaceFilename(filename)
  const { read, write } = makeFileHandlers(cssModuleInterfaceFilename)
  const regex = /(?<=\}\s*|^)(\.[a-zA-Z0-9_-]+)(?=\s*{)/g
  let match
  const classNames = []
  while ((match = regex.exec(source))) {
    if (classNames.indexOf(match[1]) < 0) {
      classNames.push(match[1].replace('.', ''))
    }
  }
  const interfaceFile = `${bannerMessage}\n${cssModuleToInterface(classNames)}\n${cssModuleExport}`
  read((_, fileContents) => {
    write(interfaceFile, (err) => {})
  })
  debugger
  return source
}
